from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from data_base import db
from data_base.models.user import User
from keyboards.common import get_timezone_keyboard, get_age_group_keyboard
from keyboards import admin_kb, student_kb
from utils.storage import admin_modes
import logging

logger = logging.getLogger(__name__)


class Registration(StatesGroup):
    full_name = State()
    timezone = State()
    age_group = State()


class SupportState(StatesGroup):
    waiting_for_question = State()


async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"Start command from user: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await User.get_user(user_id)
    if user:
        role = await db.get_user_role(user_id)
        if role == "admin":
            admin_modes[user_id] = 'admin'
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=admin_kb.kb_admin)
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=student_kb.kb_student)
        return

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    welcome_text = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ë–æ—Ç! üåü\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è:\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º üí∞\n"
        "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —É–º–æ–º üìà\n"
        "‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ üåê\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±—É–¥—É—â–µ–µ üöÄ\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û:"
    )

    await message.answer(welcome_text)
    await Registration.full_name.set()


async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text
    await state.update_data(full_name=full_name)
    logger.info(f"User {message.from_user.id} entered full name: {full_name}")

    # –ó–∞–ø—Ä–æ—Å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    timezone_text = (
        "‚è∞ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, "
        "—á—Ç–æ–±—ã –º—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–ª–∏ —Ç–µ–±—è –Ω–æ—á—å—é:"
    )
    await message.answer(timezone_text, reply_markup=get_timezone_keyboard())
    await Registration.timezone.set()


async def process_timezone(callback: types.CallbackQuery, state: FSMContext):
    timezone_map = {
        "tz_utc2": "UTC+2",
        "tz_utc3": "UTC+3",
        "tz_utc4": "UTC+4",
        "tz_utc5": "UTC+5",
        "tz_utc6": "UTC+6",
        "tz_utc7": "UTC+7",
        "tz_utc8": "UTC+8",
        "tz_utc9": "UTC+9",
        "tz_utc10": "UTC+10",
        "tz_utc11": "UTC+11",
        "tz_utc12": "UTC+12",
        "tz_utc-10": "UTC-10",
        "tz_utc-11": "UTC-11",
        "tz_utc-12": "UTC-12"
    }

    timezone = timezone_map.get(callback.data, "UTC+3")
    user_data = await state.get_data()
    full_name = user_data['full_name']
    user_id = callback.from_user.id

    logger.info(f"User {user_id} selected timezone: {timezone}")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(timezone=timezone)

    # –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
                                  reply_markup=get_age_group_keyboard())
    await Registration.age_group.set()
    await callback.answer()


async def process_age_group(callback: types.CallbackQuery, state: FSMContext):
    age_group = callback.data.split('_')[1]  # "14-17" –∏–ª–∏ "18-25"
    user_data = await state.get_data()
    full_name = user_data['full_name']
    timezone = user_data.get('timezone', 'UTC+3')
    user_id = callback.from_user.id

    logger.info(f"User {user_id} selected age group: {age_group}")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ê–î–ú–ò–ù–ê–ú–ò
    role = 'admin'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.add_user(user_id, callback.from_user.username, full_name, role, age_group)
    await User.update_user(user_id, full_name, timezone, age_group)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥—Ä—É–ø–ø–∞—Ö
    groups_text = (
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º:\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: @financial_university_chat\n"
        "‚Ä¢ –ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞: @financial_university_project\n\n"
        "–¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!"
    )

    # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –∞–¥–º–∏–Ω—ã
    admin_modes[user_id] = 'admin'
    await callback.message.answer(groups_text, reply_markup=admin_kb.kb_admin)

    await state.finish()
    await callback.answer()


async def request_support(message: types.Message):
    await message.answer("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")
    await SupportState.waiting_for_question.set()


async def process_support_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await User.get_user(user_id)

    if user_data:
        username = message.from_user.username
        full_name = user_data[2]  # full_name
        role = user_data[3]  # role

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await User.create_support_ticket(user_id, username, full_name, role, message.text)

        await message.answer("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    await state.finish()


def register_handlers_common(dp):
    dp.register_message_handler(cmd_start, commands=['start'], state=None)
    dp.register_message_handler(process_full_name, state=Registration.full_name)
    dp.register_callback_query_handler(process_timezone, state=Registration.timezone)
    dp.register_callback_query_handler(process_age_group, state=Registration.age_group)
    dp.register_message_handler(request_support, text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', state=None)
    dp.register_message_handler(process_support_question, state=SupportState.waiting_for_question)