import asyncio
from datetime import datetime, timedelta

import pytz

from keyboards import admin_kb, student_kb
from utils.storage import admin_modes
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot
from data_base.models.user import User
from keyboards import quest_management_kb
import logging
import re
from keyboards.common import get_cancel_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

logger = logging.getLogger(__name__)

class BroadcastState(StatesGroup):
    waiting_for_message = State()
    waiting_for_time = State()

async def admin_broadcast(message: types.Message):
    await BroadcastState.waiting_for_message.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

async def process_broadcast_message(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)
    await BroadcastState.next()
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –ú–æ—Å–∫–≤–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 12:00):")


async def process_broadcast_time(message: types.Message, state: FSMContext):
    time_pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    if not re.match(time_pattern, message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):")
        return

    data = await state.get_data()
    message_text = data['message']
    scheduled_time = message.text  # –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await User.add_broadcast(message_text, scheduled_time)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    asyncio.create_task(schedule_broadcast(message_text, scheduled_time))

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time} –ø–æ –ú–æ—Å–∫–≤–µ!")
    await state.finish()


async def schedule_broadcast(message_text: str, scheduled_time: str):
    try:
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ
        msk_tz = pytz.timezone('Europe/Moscow')
        now_msk = datetime.now(msk_tz)

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        hour, minute = map(int, scheduled_time.split(':'))
        send_time = now_msk.replace(hour=hour, minute=minute, second=0, microsecond=0)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if send_time < now_msk:
            send_time += timedelta(days=1)

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        delay = (send_time - now_msk).total_seconds()

        # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {scheduled_time} –ú–°–ö")
        await asyncio.sleep(delay)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await User.get_all_users()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user in users:
            user_id = user[0]
            try:
                await bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}")
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")

class SupportAnswerState(StatesGroup):
    waiting_for_answer = State()


async def admin_manage_support(message: types.Message):
    logger.info(f"Admin {message.from_user.id} accessed support management")
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('üì¨ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è'),
        KeyboardButton('üì≠ –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è'),
        KeyboardButton('üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    )
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:", reply_markup=keyboard)


async def admin_closed_tickets(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å 'answered' –∏–ª–∏ 'closed')
    tickets = await User.get_closed_tickets()

    if not tickets:
        await message.answer("üì≠ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")
        return

    response = "üì≠ <b>–ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n"

    for ticket in tickets:
        ticket_id = ticket[0]
        username = ticket[2] or ""
        full_name = ticket[3] or ""
        role = ticket[4] or ""
        message_text = ticket[5] or ""
        created_at = ticket[6] or ""
        status = ticket[7] or ""
        admin_response = ticket[9] or ""
        response_at = ticket[10] or ""

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        short_message = message_text[:100] + "..." if len(message_text) > 100 else message_text
        short_response = admin_response[:100] + "..." if len(admin_response) > 100 else admin_response

        response += (
            f"<b>ID:{ticket_id}</b> [{created_at.split()[0]}]\n"
            f"üë§ {full_name} (@{username}) [{role}]\n"
            f"üí¨ {short_message}\n"
            f"üì© –û—Ç–≤–µ—Ç: {short_response}\n"
            f"üïí –û—Ç–≤–µ—Ç –¥–∞–Ω: {response_at.split()[0]}\n\n"
        )

    await message.answer(response, parse_mode="HTML")


async def admin_open_tickets(message: types.Message):
    tickets = await User.get_open_tickets()

    if not tickets:
        await message.answer("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")
        return

    response = "üì¨ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for ticket in tickets:
        ticket_id = ticket[0]
        user_id = ticket[1]
        username = ticket[2] or ""
        full_name = ticket[3] or ""
        role = ticket[4] or ""
        message_text = ticket[5] or ""
        created_at = ticket[6] or ""

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        short_message = message_text[:100] + "..." if len(message_text) > 100 else message_text

        response += f"<b>ID:{ticket_id}</b> [{created_at.split()[0]}]\nüë§ {full_name} (@{username}) [{role}]\nüí¨ {short_message}\n\n"
        keyboard.add(InlineKeyboardButton(
            f"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ ID:{ticket_id}",
            callback_data=f"answer_ticket_{ticket_id}"
        ))

    await message.answer(response, parse_mode="HTML", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('answer_ticket_'), active_role='admin')
async def start_answer_ticket(callback: types.CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split('_')[2])
    await state.update_data(ticket_id=ticket_id)
    await callback.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}:",
        reply_markup=get_cancel_kb()
    )
    await SupportAnswerState.waiting_for_answer.set()
    await callback.answer()


@dp.message_handler(state=SupportAnswerState.waiting_for_answer, active_role='admin')
async def process_support_answer(message: types.Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel_any_action(message, state)
        return

    data = await state.get_data()
    ticket_id = data['ticket_id']
    admin_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await User.answer_ticket(ticket_id, admin_id, message.text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ticket = await User.get_ticket(ticket_id)
    if ticket:
        user_id = ticket[1]
        try:
            await bot.send_message(
                user_id,
                f"üì© <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}:</b>\n\n{message.text}\n\n"
                "–ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω, –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞!",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error sending response to user {user_id}: {str(e)}")

    await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    await state.finish()

class AddQuestState(StatesGroup):
    title = State()
    description = State()
    time = State()
    confirm = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è



async def admin_manage_quests(message: types.Message):
    logger.info(f"Admin {message.from_user.id} accessed quest management")
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤'),
        KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç'),
        KeyboardButton('üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    )
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞–º–∏:", reply_markup=keyboard)


async def admin_list_quests(message: types.Message):
    quests = await User.get_all_quests()

    if not quests:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤")
        return

    response = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤:</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=2)

    for quest in quests:
        quest_id, title, description, time_utc3, active = quest
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        response += f"<b>ID {quest_id}: {title}</b>\n{description}\n‚è∞ –í—Ä–µ–º—è: {time_utc3} –ú–°–ö\n–°—Ç–∞—Ç—É—Å: {status}\n\n"

        keyboard.add(InlineKeyboardButton(
            f"{'‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' if active else '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'} {quest_id}",
            callback_data=f"toggle_quest_{quest_id}_{1 if not active else 0}"
        ))

    await message.answer(response, parse_mode="HTML", reply_markup=keyboard)


async def process_quest_confirm(message: types.Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel_quest_creation(message, state)
        return

    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        data = await state.get_data()
        await User.add_quest(data['title'], data['description'], data['time'])
        await message.answer(f"‚úÖ –ö–≤–µ—Å—Ç '{data['title']}' –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_kb.kb_admin)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã")
        return

    await state.finish()

async def cancel_quest_creation(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_kb.kb_admin)

async def admin_add_quest(message: types.Message):
    await AddQuestState.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:", reply_markup=get_cancel_kb())


async def process_quest_title(message: types.Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel_quest_creation(message, state)
        return

    await state.update_data(title=message.text)
    await AddQuestState.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:", reply_markup=get_cancel_kb())


async def process_quest_description(message: types.Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel_quest_creation(message, state)
        return

    await state.update_data(description=message.text)
    await AddQuestState.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –ú–°–ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):", reply_markup=get_cancel_kb())


async def process_quest_time(message: types.Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel_quest_creation(message, state)
        return

    time_str = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(time=time_str)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    confirm_text = (
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"<b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {data['time']} –ú–°–ö"
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(KeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'), KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))

    await AddQuestState.next()
    await message.answer(confirm_text, parse_mode="HTML", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞', state='*')
async def cancel_any_action(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω—è–µ–º
    if 'AddQuestState' in current_state:
        action_name = "—Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"
    elif 'SupportAnswerState' in current_state:
        action_name = "–æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
    else:
        action_name = "–¥–µ–π—Å—Ç–≤–∏–µ"

    await state.finish()
    await message.answer(f"‚ùå {action_name.capitalize()} –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_kb.kb_admin)

@dp.callback_query_handler(lambda c: c.data.startswith('toggle_quest_'))
async def toggle_quest(callback: types.CallbackQuery):
    data = callback.data.split('_')
    quest_id = int(data[2])
    activate = bool(int(data[3]))

    await User.toggle_quest(quest_id, activate)
    action = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if activate else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"–ö–≤–µ—Å—Ç {action}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
    await admin_list_quests(callback.message)

async def admin_start(message: types.Message):
    user_id = message.from_user.id
    admin_modes[user_id] = 'admin'
    logger.info(f"Admin panel opened by {user_id}")
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb.kb_admin)

async def admin_manage_users(message: types.Message):
    logger.info(f"Admin {message.from_user.id} accessed user management")
    await message.answer("–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

async def admin_finance_stats(message: types.Message):
    logger.info(f"Admin {message.from_user.id} accessed finance stats")
    await message.answer("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

async def admin_student_mode(message: types.Message):
    user_id = message.from_user.id
    admin_modes[user_id] = 'student'
    logger.info(f"Admin {user_id} switched to student mode")
    await message.answer("–†–µ–∂–∏–º —É—á–µ–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=student_kb.kb_student)


async def back_to_admin_panel(message: types.Message):
    user_id = message.from_user.id
    admin_modes[user_id] = 'admin'
    logger.info(f"Admin {user_id} returned to admin panel")
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_kb.kb_admin)



class AddShopItem(StatesGroup):
    name = State()
    description = State()
    price = State()
    category = State()


async def admin_manage_shop(message: types.Message):
    logger.info(f"Admin {message.from_user.id} accessed shop management")
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'),
        KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'),
        KeyboardButton('üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    )
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º:", reply_markup=keyboard)


async def admin_list_shop_items(message: types.Message):
    items = await User.get_shop_items()

    if not items:
        await message.answer("üõí –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return

    response = "üõí <b>–¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:</b>\n\n"
    for item in items:
        _, name, description, price, category = item
        response += f"<b>{name}</b>\n{description}\nüí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"

    await message.answer(response, parse_mode="HTML")


async def admin_add_shop_item(message: types.Message):
    await AddShopItem.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


async def process_shop_item_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await AddShopItem.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


async def process_shop_item_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await AddShopItem.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ –º–æ–Ω–µ—Ç–∞—Ö):")


async def process_shop_item_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    await state.update_data(price=price)
    await AddShopItem.next()

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('–ú–µ—Ä—á'),
        KeyboardButton('–ü–æ–º–æ—â—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤')
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)


async def process_shop_item_category(message: types.Message, state: FSMContext):
    category = message.text
    if category not in ['–ú–µ—Ä—á', '–ü–æ–º–æ—â—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤']:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    data = await state.get_data()
    await User.add_shop_item(data['name'], data['description'], data['price'], category)
    await state.finish()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await admin_manage_shop(message)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω")


def register_handlers_admin(dp):
    dp.register_message_handler(admin_manage_quests, text='üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞–º–∏', active_role='admin')
    dp.register_message_handler(admin_list_quests, text='üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤', active_role='admin')
    dp.register_message_handler(admin_add_quest, text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç', active_role='admin')

    dp.register_message_handler(admin_start, commands=['start'], active_role='admin')
    dp.register_message_handler(process_quest_title, state=AddQuestState.title)
    dp.register_message_handler(process_quest_description, state=AddQuestState.description)
    dp.register_message_handler(process_quest_time, state=AddQuestState.time)
    dp.register_message_handler(admin_broadcast, text='üì¢ –†–∞—Å—Å—ã–ª–∫–∞', active_role='admin')
    dp.register_message_handler(process_broadcast_message, state=BroadcastState.waiting_for_message)
    dp.register_message_handler(process_broadcast_time, state=BroadcastState.waiting_for_time)
    dp.register_message_handler(admin_manage_shop, text='üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º', active_role='admin')
    dp.register_message_handler(admin_list_shop_items, text='üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', active_role='admin')
    dp.register_message_handler(admin_add_shop_item, text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', active_role='admin')
    dp.register_message_handler(admin_manage_support, text='üì≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', active_role='admin')
    dp.register_message_handler(admin_open_tickets, text='üì¨ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', active_role='admin')
    dp.register_message_handler(admin_closed_tickets, text='üì≠ –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', active_role='admin')
    dp.register_message_handler(process_support_answer, state=SupportAnswerState.waiting_for_answer, active_role='admin')
    dp.register_message_handler(process_shop_item_name, state=AddShopItem.name)
    dp.register_message_handler(process_shop_item_description, state=AddShopItem.description)
    dp.register_message_handler(process_shop_item_price, state=AddShopItem.price)
    dp.register_message_handler(process_shop_item_category, state=AddShopItem.category)
    dp.register_message_handler(admin_finance_stats, text='üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', active_role='admin')
    dp.register_message_handler(admin_broadcast, text='üì¢ –†–∞—Å—Å—ã–ª–∫–∞', active_role='admin')
    dp.register_message_handler(admin_student_mode, text='üéì –†–µ–∂–∏–º —É—á–µ–Ω–∏–∫–∞', active_role='admin')
    dp.register_message_handler(back_to_admin_panel, text='üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', active_role='admin')
    dp.register_message_handler(cancel_any_action, lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞', state='*')
