import os
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from PIL import Image, ImageDraw, ImageFont
from create_bot import dp, bot
from data_base import db
from data_base.courses_data import COURSES
from data_base.models.user import User
from keyboards.common import (
    course_selection_keyboard,
    lesson_selection_keyboard,
    mark_as_read_keyboard,
    start_quiz_keyboard,
    quiz_options_keyboard,
    after_quiz_keyboard
)

import io
import logging
import textwrap

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
class QuizState(StatesGroup):
    waiting_for_answer = State()
    quiz_data = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
class QuizFSM(StatesGroup):
    in_progress = State()


@dp.message_handler(lambda message: message.text == 'üìö –û–±—É—á–µ–Ω–∏–µ', active_role=None)
async def show_courses(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} accessed learning section")

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    age_group = await User.get_user_age_group(user_id)
    if not age_group:
        await message.answer("‚ùå –í–∞—à–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ
    available_courses = {}
    for course_id, course in COURSES.items():
        if course['age_group'] == 'all' or course['age_group'] == age_group:
            available_courses[course_id] = course

    if not available_courses:
        await message.answer("üò¢ –î–ª—è –≤–∞—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                         reply_markup=course_selection_keyboard(available_courses))


@dp.callback_query_handler(lambda c: c.data.startswith('course_'), active_role='student')
async def select_course(callback: types.CallbackQuery):
    course_id = int(callback.data.split('_')[1])
    course = COURSES.get(course_id)

    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    lessons_progress = {}
    for lesson_id in course['lessons']:
        progress = await db.get_lesson_progress(user_id, course_id, lesson_id)
        if progress:
            lessons_progress[lesson_id] = {
                'read': bool(progress[3]),
                'quiz_passed': bool(progress[4])
            }

    await callback.message.answer(
        f"<b>{course['title']}</b>\n\n"
        f"{course['description']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
        parse_mode="HTML",
        reply_markup=lesson_selection_keyboard(course_id, course['lessons'], lessons_progress)
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('lesson_'), active_role='student')
async def show_lesson(callback: types.CallbackQuery):
    data = callback.data.split('_')
    course_id = int(data[1])
    lesson_id = int(data[2])
    course = COURSES.get(course_id)

    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    lesson = course['lessons'].get(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
    content = f"<b>–£—Ä–æ–∫ {lesson_id}: {lesson['title']}</b>\n\n{lesson['content']}"
    await callback.message.answer(content, parse_mode="HTML")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–Ω –ª–∏ —É–∂–µ —É—Ä–æ–∫
    progress = await db.get_lesson_progress(callback.from_user.id, course_id, lesson_id)
    if progress and progress[3]:  # read
        # –ï—Å–ª–∏ —É—Ä–æ–∫ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç
        await callback.message.answer(
            "–í—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?",
            reply_markup=start_quiz_keyboard(course_id, lesson_id)
        )
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
        await callback.message.answer(
            "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã:",
            reply_markup=mark_as_read_keyboard(course_id, lesson_id)
        )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('read_'), active_role='student')
async def mark_lesson_read(callback: types.CallbackQuery):
    data = callback.data.split('_')
    course_id = int(data[1])
    lesson_id = int(data[2])
    user_id = callback.from_user.id

    # –ü–æ–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
    await db.mark_lesson_read(user_id, course_id, lesson_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text("‚úÖ –£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É:",
        reply_markup=start_quiz_keyboard(course_id, lesson_id)
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('quiz_'), active_role='student')
async def start_quiz(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    course_id = int(data[1])
    lesson_id = int(data[2])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
    course = COURSES.get(course_id)
    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    lesson = course['lessons'].get(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    quiz = lesson.get('quiz', {})

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞ –≤ FSM
    quiz_data = {
        'course_id': course_id,
        'lesson_id': lesson_id,
        'current_question': 0,
        'correct_answers': 0,
        'questions': quiz.get('questions', [])
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(quiz_data=quiz_data)
    await QuizFSM.in_progress.set()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    if not quiz_data['questions']:
        await callback.answer("–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —Ç–µ—Å—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤!")
        await state.finish()
        return

    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ask_question(callback.message, state)
    await callback.answer()


async def ask_question(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    quiz_data = data.get('quiz_data', {})

    if not quiz_data or quiz_data['current_question'] >= len(quiz_data['questions']):
        return

    question_index = quiz_data['current_question']
    question = quiz_data['questions'][question_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {question_index + 1}/{len(quiz_data['questions'])}:\n{question['question']}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    await message.answer(
        question_text,
        reply_markup=quiz_options_keyboard(question['options'])
    )


@dp.callback_query_handler(lambda c: c.data.startswith('answer_'), state=QuizFSM.in_progress,
                           active_role='student')
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    quiz_data = data.get('quiz_data', {})

    if not quiz_data:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.finish()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
    answer_index = int(callback.data.split('_')[1])
    question_index = quiz_data['current_question']

    if question_index >= len(quiz_data['questions']):
        await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    question = quiz_data['questions'][question_index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = (answer_index == question['correct'])

    if is_correct:
        quiz_data['correct_answers'] += 1
        feedback = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ."

    await callback.message.answer(feedback)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    quiz_data['current_question'] += 1
    await state.update_data(quiz_data=quiz_data)

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    if quiz_data['current_question'] >= len(quiz_data['questions']):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await finish_quiz(callback.message, quiz_data, callback.from_user.id)
        await state.finish()
    else:
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await ask_question(callback.message, state)

    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('next_lesson_'), active_role='student')
async def go_to_next_lesson(callback: types.CallbackQuery):
    data = callback.data.split('_')
    course_id = int(data[2])
    lesson_id = int(data[3])

    # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π callback –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É—Ä–æ–∫
    class FakeCallback:
        def __init__(self, data, message):
            self.data = data
            self.message = message
            self.from_user = message.from_user

    fake_cb = FakeCallback(f"lesson_{course_id}_{lesson_id}", callback.message)

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–∞
    await show_lesson(fake_cb)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('retry_quiz_'), active_role='student')
async def retry_quiz(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    course_id = int(data[2])
    lesson_id = int(data[3])

    # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π callback –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ—Å—Ç
    class FakeCallback:
        def __init__(self, data, message):
            self.data = data
            self.message = message
            self.from_user = message.from_user

    fake_cb = FakeCallback(f"quiz_{course_id}_{lesson_id}", callback.message)

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞
    await start_quiz(fake_cb, state)
    await callback.answer()


async def generate_and_send_certificate(message: types.Message, user_id: int, course_title: str):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await User.get_user(user_id)
    full_name = user_data[2] if user_data else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    try:
        # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = 1000, 700

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        img = Image.new('RGB', (width, height), color=(255, 255, 255))
        d = ImageDraw.Draw(img)

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            try:
                # –î–ª—è Windows
                font_title = ImageFont.truetype("arialbd.ttf", 40)
                font_name = ImageFont.truetype("arialbd.ttf", 36)
                font_course = ImageFont.truetype("arial.ttf", 30)
            except:
                # –î–ª—è Linux/Mac
                font_title = ImageFont.truetype("DejaVuSans-Bold.ttf", 40)
                font_name = ImageFont.truetype("DejaVuSans-Bold.ttf", 36)
                font_course = ImageFont.truetype("DejaVuSans.ttf", 30)
        except:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            font_title = ImageFont.load_default()
            font_name = ImageFont.load_default()
            font_course = ImageFont.load_default()
            logger.warning("Using default font for certificate generation")

        # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–°–ï–†–¢–ò–§–ò–ö–ê–¢"
        d.text((width // 2, 150), title, fill=(0, 0, 0), font=font_title, anchor="mm")

        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        text = "–ù–∞—Å—Ç–æ—è—â–∏–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ"
        d.text((width // 2, 230), text, fill=(0, 0, 0), font=font_course, anchor="mm")

        # –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        d.text((width // 2, 300), full_name, fill=(0, 0, 0), font=font_name, anchor="mm")

        text = "—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª(–∞) –∫—É—Ä—Å"
        d.text((width // 2, 360), text, fill=(0, 0, 0), font=font_course, anchor="mm")

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        course_text = f"¬´{course_title}¬ª"
        d.text((width // 2, 420), course_text, fill=(0, 0, 0), font=font_course, anchor="mm")

        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä—è–º–æ –∏–∑ –ø–∞–º—è—Ç–∏
        await message.answer_photo(
            img_byte_arr,
            caption=f"üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞ ¬´{course_title}¬ª!\n–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        await message.answer(
            f"üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞ ¬´{course_title}¬ª!\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        )

async def finish_quiz(message: types.Message, quiz_data: dict, user_id: int):
    total_questions = len(quiz_data['questions'])
    correct_answers = quiz_data['correct_answers']
    percent_correct = (correct_answers / total_questions) * 100 if total_questions > 0 else 0

    course = COURSES.get(quiz_data['course_id'], {})
    lesson = course.get('lessons', {}).get(quiz_data['lesson_id'], {})
    quiz = lesson.get('quiz', {})
    required_percent = quiz.get('pass_percent', 75)

    result_text = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_questions}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percent_correct:.1f}%"
    )

    await message.answer(result_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if percent_correct >= required_percent:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–µ—Å—Ç —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω —Ä–∞–Ω–µ–µ
        current_progress = await db.get_lesson_progress(user_id, quiz_data['course_id'], quiz_data['lesson_id'])
        already_passed = current_progress and current_progress[4]  # quiz_passed

        coins_earned = 0
        if not already_passed:
            coins_earned = 50
            await db.add_coins(user_id, coins_earned)
            await db.mark_quiz_passed(
                user_id,
                quiz_data['course_id'],
                quiz_data['lesson_id'],
                coins_earned
            )
            success_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!\n–ü–æ–ª—É—á–µ–Ω–æ: {coins_earned} –º–æ–Ω–µ—Ç"
        else:
            success_text = "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ! –ú–æ–Ω–µ—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥."

        await message.answer(success_text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —É—Ä–æ–∫–æ–º –≤ –∫—É—Ä—Å–µ
        course_lessons = list(course.get('lessons', {}).keys())
        is_last_lesson = False
        if course_lessons:
            last_lesson_id = max(course_lessons)
            is_last_lesson = (quiz_data['lesson_id'] == last_lesson_id)

        course_completed = await db.is_course_completed(user_id, quiz_data['course_id'])

        if course_completed:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            await generate_and_send_certificate(message, user_id, course.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å'))
        else:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            next_lesson_id = quiz_data['lesson_id'] + 1
            if next_lesson_id in course['lessons']:
                await message.answer(
                    "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É?",
                    reply_markup=after_quiz_keyboard(
                        quiz_data['course_id'],
                        next_lesson_id,
                        show_next=True
                    )
                )
            else:
                # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                await message.answer("–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    else:
        fail_text = (
            f"üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç.\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {required_percent}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
        )
        await message.answer(fail_text)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
        await message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=after_quiz_keyboard(
                quiz_data['course_id'],
                quiz_data['lesson_id'],
                show_next=False
            )
        )


def register_handlers_learning(dp):
    # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    pass
