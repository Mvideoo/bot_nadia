from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from create_bot import dp
from data_base.models.user import User
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from data_base import db
import logging
from keyboards import admin_kb
from keyboards.common import get_timezone_keyboard, get_age_group_keyboard

logger = logging.getLogger(__name__)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
OLYMPIADS_INFO = {
    "overview": {
        "title": "üèÖ –û–ª–∏–º–ø–∏–∞–¥—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ",
        "description": (
            "–£—á–∞—Å—Ç–∏–µ –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ - –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, "
            "–ø–æ–ª—É—á–∏—Ç—å –ª—å–≥–æ—Ç—ã –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≤—É–∑—ã –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä—É–≥–æ–∑–æ—Ä. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:"
        ),
        "olympiads": [
            "‚Ä¢ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ (–í—Å–û–®)",
            "‚Ä¢ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤",
            "‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥–∞ ¬´–í—ã—Å—à–∞—è –ø—Ä–æ–±–∞¬ª (–ù–ò–£ –í–®–≠)",
            "‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥–∞ ¬´–õ–æ–º–æ–Ω–æ—Å–æ–≤¬ª (–ú–ì–£)",
            "‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥–∞ –°–ü–±–ì–£ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ",
            "‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥–∞ ¬´–§–∏–Ω–∞—Ç–ª–æ–Ω¬ª –¥–ª—è —Å—Ç–∞—Ä—à–µ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤"
        ]
    },
    "vos": {
        "title": "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ (–í—Å–û–®)",
        "description": (
            "üîπ <b>–°–∞–º—ã–π –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å</b> –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –†–æ—Å—Å–∏–∏\n"
            "üîπ –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ 4 —ç—Ç–∞–ø–∞: —à–∫–æ–ª—å–Ω—ã–π, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π\n"
            "üîπ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –ø—Ä–∏–∑–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –ª—å–≥–æ—Ç—ã –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≤—É–∑—ã\n"
            "üîπ <b>–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> –æ–∫—Ç—è–±—Ä—å-–∞–ø—Ä–µ–ª—å\n\n"
            "<b>–†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://olimpiada.ru/activity/43'>olimpiada.ru</a>\n"
            "‚Ä¢ –ó–∞–¥–∞—á–∏ –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç —Å —Ä–µ—à–µ–Ω–∏—è–º–∏\n"
            "‚Ä¢ –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –Ω–∞ Stepik –∏ –õ–µ–∫—Ç–æ—Ä–∏—É–º–µ"
        )
    },
    "mos": {
        "title": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤",
        "description": (
            "üîπ <b>–ö—Ä—É–ø–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞</b> —Å —É—á–∞—Å—Ç–∏–µ–º —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ —Å–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n"
            "üîπ –í—Ö–æ–¥–∏—Ç –≤ –ü–µ—Ä–µ—á–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥ –ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏ –†–æ—Å—Å–∏–∏\n"
            "üîπ <b>–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> –¥–µ–∫–∞–±—Ä—å-–º–∞—Ä—Ç\n\n"
            "<b>–†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://mos.olimpiada.ru/'>mos.olimpiada.ru</a>\n"
            "‚Ä¢ –ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤ –¶–ü–ú"
        )
    },
    "vysshaya_proba": {
        "title": "–û–ª–∏–º–ø–∏–∞–¥–∞ ¬´–í—ã—Å—à–∞—è –ø—Ä–æ–±–∞¬ª",
        "description": (
            "üîπ <b>–û–ª–∏–º–ø–∏–∞–¥–∞ –æ—Ç –ù–ò–£ –í–®–≠</b> —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —É—á–∞—Å—Ç–∏–µ–º\n"
            "üîπ –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –¥–ª—è 7-11 –∫–ª–∞—Å—Å–æ–≤\n"
            "üîπ <b>–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> –Ω–æ—è–±—Ä—å-–∞–ø—Ä–µ–ª—å\n\n"
            "<b>–†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://olymp.hse.ru/mmo/'>olymp.hse.ru/mmo</a>\n"
            "‚Ä¢ –ü—Ä–æ–±–Ω—ã–µ —Ç—É—Ä—ã –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –í–µ–±–∏–Ω–∞—Ä—ã –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –í–®–≠"
        )
    },
    "lomonosov": {
        "title": "–û–ª–∏–º–ø–∏–∞–¥–∞ ¬´–õ–æ–º–æ–Ω–æ—Å–æ–≤¬ª",
        "description": (
            "üîπ <b>–û–ª–∏–º–ø–∏–∞–¥–∞ –ú–ì–£ –∏–º. –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞</b>\n"
            "üîπ –í–∫–ª—é—á–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
            "üîπ <b>–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> –æ–∫—Ç—è–±—Ä—å-–º–∞—Ä—Ç\n\n"
            "<b>–†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://olymp.msu.ru/'>olymp.msu.ru</a>\n"
            "‚Ä¢ –ó–∞–¥–∞—á–∏ –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç —Å —Ä–µ—à–µ–Ω–∏—è–º–∏\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ú–ì–£"
        )
    },
    "sirius": {
        "title": "–¶–µ–Ω—Ç—Ä ¬´–°–∏—Ä–∏—É—Å¬ª",
        "description": (
            "üîπ <b>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–ª—è –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π</b>\n"
            "üîπ –ü—Ä–æ–≤–æ–¥–∏—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º\n"
            "üîπ <b>–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å:</b> —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–π –æ—Ç–±–æ—Ä\n\n"
            "<b>–†–µ—Å—É—Ä—Å—ã:</b>\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://sochisirius.ru/'>sochisirius.ru</a>\n"
            "‚Ä¢ –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ\n"
            "‚Ä¢ –í–µ–±–∏–Ω–∞—Ä—ã —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –æ–ª–∏–º–ø–∏–∞–¥"
        )
    },
    "vzlet": {
        "title": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ¬´–í–∑–ª—ë—Ç¬ª",
        "description": (
            "üîπ <b>–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π</b> –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n"
            "üîπ –ü—Ä–æ–≤–æ–¥–∏—Ç –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã–µ —Å–±–æ—Ä—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            "üîπ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å\n\n"
            "<b>–†–µ—Å—É—Ä—Å—ã:</b>\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://olympmo.ru/'>olympmo.ru</a>\n"
            "‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã\n"
            "‚Ä¢ –û—á–Ω—ã–µ —Å–º–µ–Ω—ã –≤ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ"
        )
    }
}


class EditProfile(StatesGroup):
    waiting_edit_choice = State()
    waiting_new_fio = State()
    waiting_new_timezone = State()
    waiting_new_age_group = State()


async def show_profile(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"Profile accessed by {user_id}")
    user_data = await User.get_user(user_id)

    if user_data:
        full_name = user_data[2]  # full_name
        coins = user_data[5]  # coins
        timezone = user_data[4]  # timezone
        age_group = user_data[6]  # age_group

        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üìõ <b>–§–ò–û:</b> {full_name}\n"
            f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:</b> {age_group}\n"
            f"üí∞ <b>–§–∏–Ω–∫–æ–∏–Ω—ã:</b> {coins}\n"
            f"‚è∞ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\n"
            "–§–∏–Ω–∫–æ–∏–Ω—ã –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Ö–æ–¥—è —É—Ä–æ–∫–∏!"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile"))

        await message.answer(profile_text, parse_mode="HTML", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'edit_profile')
async def edit_profile_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_fio"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="edit_timezone"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É", callback_data="edit_age_group")
    )
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await EditProfile.waiting_edit_choice.set()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state=EditProfile.waiting_edit_choice)
async def process_edit_choice(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == 'edit_fio':
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
        await EditProfile.waiting_new_fio.set()
    elif choice == 'edit_timezone':
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=get_timezone_keyboard())
        await EditProfile.waiting_new_timezone.set()
    elif choice == 'edit_age_group':
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:", reply_markup=get_age_group_keyboard())
        await EditProfile.waiting_new_age_group.set()
    await callback.answer()


@dp.message_handler(state=EditProfile.waiting_new_fio)
async def process_new_fio(message: types.Message, state: FSMContext):
    new_fio = message.text
    user_id = message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await User.update_user(user_id, full_name=new_fio)

    await message.answer("‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.finish()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    await show_profile(message)


async def process_new_timezone(callback: types.CallbackQuery, state: FSMContext):
    timezone_map = {
        "tz_utc2": "UTC+2",
        "tz_utc3": "UTC+3",
        "tz_utc4": "UTC+4",
        "tz_utc5": "UTC+5",
        "tz_utc6": "UTC+6",
        "tz_utc7": "UTC+7",
        "tz_utc8": "UTC+8",
        "tz_utc9": "UTC+9",
        "tz_utc10": "UTC+10",
        "tz_utc11": "UTC+11",
        "tz_utc12": "UTC+12",
        "tz_utc-10": "UTC-10",
        "tz_utc-11": "UTC-11",
        "tz_utc-12": "UTC-12"
    }

    timezone = timezone_map.get(callback.data, "UTC+3")
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    await User.update_user(user_id, timezone=timezone)

    await callback.message.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timezone}")
    await state.finish()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    await show_profile(callback.message)


@dp.callback_query_handler(lambda c: c.data in ["age_14-17", "age_18-25"], state=EditProfile.waiting_new_age_group)
async def process_new_age_group(callback: types.CallbackQuery, state: FSMContext):
    age_group = callback.data.split('_')[1]  # "14-17" –∏–ª–∏ "18-25"
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
    await User.update_user(user_id, age_group=age_group)

    await callback.message.answer(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {age_group}")
    await state.finish()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    await show_profile(callback.message)


# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ student.py ...

async def show_quests(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"Quests accessed by {user_id}")

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–≤–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        # (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏)
        await message.delete()
    except:
        pass

    try:
        quests = await User.get_today_quests_for_user(user_id)

        if not quests:
            await message.answer("üéØ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ—Ç! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            return

        response = "üéØ <b>–í–∞—à–∏ –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        keyboard = InlineKeyboardMarkup()

        for quest in quests:
            quest_id, title, description, completed = quest
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω" if completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
            response += f"<b>{title}</b>\n{description}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"

            if not completed:
                keyboard.add(InlineKeyboardButton(
                    f"–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {title}",
                    callback_data=f"complete_quest_{quest_id}"
                ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–≤–µ—Å—Ç–∞–º–∏
        await message.answer(response, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error showing quests: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query_handler(lambda c: c.data.startswith('complete_quest_'), active_role='student')
async def complete_quest(callback: types.CallbackQuery):
    try:
        quest_id = int(callback.data.split('_')[2])
        user_id = callback.from_user.id

        # –û—Ç–º–µ—á–∞–µ–º –∫–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
        await User.mark_quest_completed(user_id, quest_id)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        quests = await User.get_today_quests_for_user(user_id)

        if not quests:
            # –ï—Å–ª–∏ –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "üéØ –í—Å–µ –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
                reply_markup=None
            )
            await callback.answer("‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! +10 –º–æ–Ω–µ—Ç")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        response = "üéØ <b>–í–∞—à–∏ –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        keyboard = InlineKeyboardMarkup()

        for quest in quests:
            q_id, title, description, completed = quest
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω" if completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
            response += f"<b>{title}</b>\n{description}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"

            if not completed:
                keyboard.add(InlineKeyboardButton(
                    f"–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {title}",
                    callback_data=f"complete_quest_{q_id}"
                ))

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            response,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await callback.answer("‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! +10 –º–æ–Ω–µ—Ç")

    except Exception as e:
        logger.error(f"Error completing quest: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞")


async def show_achievements(message: types.Message):
    logger.info(f"Achievements accessed by {message.from_user.id}")
    await message.answer("–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")


async def show_tasks(message: types.Message):
    logger.info(f"Tasks accessed by {message.from_user.id}")
    await message.answer("–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è")


async def show_olympiads(message: types.Message):
    logger.info(f"Olympiads info accessed by {message.from_user.id}")

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        await message.delete()
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ª–∏–º–ø–∏–∞–¥
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–í—Å–û–®", callback_data="olympiad_vos"),
        InlineKeyboardButton("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", callback_data="olympiad_mos"),
        InlineKeyboardButton("–í—ã—Å—à–∞—è –ø—Ä–æ–±–∞", callback_data="olympiad_vysshaya_proba"),
        InlineKeyboardButton("–õ–æ–º–æ–Ω–æ—Å–æ–≤", callback_data="olympiad_lomonosov"),
        InlineKeyboardButton("–¶–µ–Ω—Ç—Ä ¬´–°–∏—Ä–∏—É—Å¬ª", callback_data="olympiad_sirius"),
        InlineKeyboardButton("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ¬´–í–∑–ª—ë—Ç¬ª", callback_data="olympiad_vzlet"),
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "üèÖ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –∏–ª–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
        parse_mode="HTML",
        reply_markup=keyboard
    )


# ... –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ ...

@dp.callback_query_handler(lambda c: c.data == 'olympiad_overview', active_role='student')
async def show_olympiads_overview(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ª–∏–º–ø–∏–∞–¥
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–í—Å–û–®", callback_data="olympiad_vos"),
        InlineKeyboardButton("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", callback_data="olympiad_mos"),
        InlineKeyboardButton("–í—ã—Å—à–∞—è –ø—Ä–æ–±–∞", callback_data="olympiad_vysshaya_proba"),
        InlineKeyboardButton("–õ–æ–º–æ–Ω–æ—Å–æ–≤", callback_data="olympiad_lomonosov"),
        InlineKeyboardButton("–¶–µ–Ω—Ç—Ä ¬´–°–∏—Ä–∏—É—Å¬ª", callback_data="olympiad_sirius"),
        InlineKeyboardButton("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ¬´–í–∑–ª—ë—Ç¬ª", callback_data="olympiad_vzlet"),
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
    await callback.message.edit_text(
        "üèÖ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –∏–ª–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('olympiad_') and c.data != 'olympiad_overview',
                           active_role='student')
async def show_olympiad_details(callback: types.CallbackQuery):
    olympiad_key = callback.data.split('_', 1)[1]
    olympiad_info = OLYMPIADS_INFO.get(olympiad_key)

    if not olympiad_info:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ–ª–∏–º–ø–∏–∞–¥
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–ª–∏–º–ø–∏–∞–¥", callback_data="olympiad_overview"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ
    await callback.message.edit_text(
        f"<b>{olympiad_info['title']}</b>\n\n"
        f"{olympiad_info.get('description', '')}",
        parse_mode="HTML",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )
    await callback.answer()


# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
async def show_shop(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"Shop accessed by {user_id}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üéÅ –ú–µ—Ä—á", callback_data="shop_category_merch"),
        InlineKeyboardButton("üíº –ü–æ–º–æ—â—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", callback_data="shop_category_expert"),
        InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="shop_my_purchases")
    )

    user_coins = await User.get_coins(user_id)
    await message.answer(
        f"üõí <b>–ú–∞–≥–∞–∑–∏–Ω —Ñ–∏–Ω–∫–æ–∏–Ω–æ–≤</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} –º–æ–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith('shop_category_'), active_role='student')
async def show_shop_category(callback: types.CallbackQuery):
    category = callback.data.split('_')[2]
    user_id = callback.from_user.id
    user_coins = await User.get_coins(user_id)

    items = await User.get_shop_items(category)

    if not items:
        await callback.answer("üò¢ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return

    response = f"üõí <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {'–º–µ—Ä—á' if category == 'merch' else '–ø–æ–º–æ—â—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤'}:</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for item in items:
        item_id, name, description, price, _ = item
        response += f"<b>{name}</b>\n{description}\nüí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n\n"
        keyboard.add(InlineKeyboardButton(
            f"–ö—É–ø–∏—Ç—å {name} - {price} –º–æ–Ω–µ—Ç",
            callback_data=f"buy_item_{item_id}"
        ))

    keyboard.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop_back"))

    await callback.message.edit_text(
        response,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('buy_item_'), active_role='student')
async def buy_item(callback: types.CallbackQuery):
    item_id = int(callback.data.split('_')[2])
    user_id = callback.from_user.id

    success, message = await User.purchase_item(user_id, item_id)

    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_coins = await User.get_coins(user_id)
        await callback.message.edit_text(
            f"{message}\n\nüí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_coins} –º–æ–Ω–µ—Ç",
            reply_markup=callback.message.reply_markup
        )
    else:
        await callback.answer(message)


@dp.callback_query_handler(lambda c: c.data == 'shop_my_purchases', active_role='student')
async def show_my_purchases(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    purchases = await User.get_user_purchases(user_id)

    if not purchases:
        response = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫"
    else:
        response = "üì¶ <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
        for purchase in purchases:
            _, name, description, date = purchase
            response += f"<b>{name}</b>\n{description}\nüïí –î–∞—Ç–∞: {date}\n\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop_back"))

    await callback.message.edit_text(
        response,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'shop_back', active_role='student')
async def back_to_shop(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_coins = await User.get_coins(user_id)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üéÅ –ú–µ—Ä—á", callback_data="shop_category_merch"),
        InlineKeyboardButton("üíº –ü–æ–º–æ—â—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", callback_data="shop_category_expert"),
        InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="shop_my_purchases")
    )

    await callback.message.edit_text(
        f"üõí <b>–ú–∞–≥–∞–∑–∏–Ω —Ñ–∏–Ω–∫–æ–∏–Ω–æ–≤</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} –º–æ–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


async def back_to_admin_panel(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"Student {user_id} returning to admin panel")
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_kb.kb_admin)


async def show_support_history(message: types.Message):
    user_id = message.from_user.id
    tickets = await User.get_user_tickets(user_id)

    if not tickets:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        return

    response = "üì¨ <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n\n"

    for ticket in tickets:
        ticket_id = ticket[0]
        message_text = ticket[5] or ""
        created_at = ticket[6] or ""
        status = ticket[7] or "open"
        admin_response = ticket[9] or ""
        response_at = ticket[10] or ""

        status_icon = "üü¢" if status == 'open' else "üîµ" if status == 'answered' else "‚ö´"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        short_message = message_text[:100] + "..." if len(message_text) > 100 else message_text

        response += f"{status_icon} <b>ID:{ticket_id}</b> [{created_at.split()[0]}]\n"
        response += f"üí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: {short_message}\n"

        if admin_response:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            short_response = admin_response[:100] + "..." if len(admin_response) > 100 else admin_response
            response += f"üì© –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {short_response}\n"
            response += f"üïí –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {response_at.split()[0]}\n"
        else:
            response += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞...\n"

        response += "\n"

    await message.answer(response, parse_mode="HTML")


async def show_rating(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"Rating accessed by {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º
    top_users = await User.get_top_students(5)
    print(top_users)

    if not top_users:
        await message.answer("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
        return

    response = "üèÜ <b>–¢–æ–ø-5 —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º:</b>\n\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    for i, user in enumerate(top_users):
        user_id, username, full_name, coins = user
        place = i + 1
        medal = "ü•á" if place == 1 else "ü•à" if place == 2 else "ü•â" if place == 3 else "üî∏"

        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        display_name = full_name[:20] + "..." if len(full_name) > 20 else full_name

        response += f"{medal} {place}. {display_name} - {coins} –º–æ–Ω–µ—Ç\n"
        if username:
            response += f"   üë§ @{username}\n"
        response += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_position = await User.get_user_position(user_id)
    user_coins = await db.get_coins(user_id)

    if user_position:
        response += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #{user_position}\n"
        response += f"–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: {user_coins}"
    else:
        response += f"\n–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: {user_coins}"

    await message.answer(response, parse_mode="HTML")


def register_handlers_student(dp):
    dp.register_message_handler(show_support_history, text='üì¨ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è', active_role='student')
    dp.register_message_handler(show_profile, text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', active_role='student')
    dp.register_message_handler(show_rating, text='üèÜ –†–µ–π—Ç–∏–Ω–≥', active_role=None)
    dp.register_message_handler(show_quests, text='üéØ –ö–≤–µ—Å—Ç—ã', active_role='student')
    dp.register_message_handler(show_olympiads, text='üèÖ –û–ª–∏–º–ø–∏–∞–¥—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ', active_role='student')
    dp.register_message_handler(show_shop, text='üõí –ú–∞–≥–∞–∑–∏–Ω', active_role='student')
    dp.register_message_handler(back_to_admin_panel, text='üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', active_role='student')
    dp.register_callback_query_handler(complete_quest, lambda c: c.data.startswith('complete_quest_'))
    dp.register_callback_query_handler(show_olympiads_overview, lambda c: c.data == 'olympiad_overview')
    dp.register_callback_query_handler(show_olympiad_details,
                                       lambda c: c.data.startswith('olympiad_') and c.data != 'olympiad_overview')
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    dp.register_callback_query_handler(edit_profile_callback, lambda c: c.data == 'edit_profile')
    dp.register_callback_query_handler(process_edit_choice, lambda c: c.data.startswith('edit_'),
                                       state=EditProfile.waiting_edit_choice)
    dp.register_message_handler(process_new_fio, state=EditProfile.waiting_new_fio)
    dp.register_callback_query_handler(process_new_timezone, state=EditProfile.waiting_new_timezone)
    dp.register_callback_query_handler(process_new_age_group, state=EditProfile.waiting_new_age_group)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(process_new_fio, state=EditProfile.waiting_new_fio)
